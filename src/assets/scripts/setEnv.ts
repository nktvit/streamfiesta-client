/* tslint:disable */
// @ts-nocheck

const { writeFile, existsSync, mkdirSync } = require('fs');

// Initialize dotenv to load environment variables
require('dotenv').config();

// Fetch environment from command line arguments or default to development
const environment = process.env.NODE_ENV || 'development';

function writeFileUsingFS(targetPath, environmentFileContent) {
  writeFile(targetPath, environmentFileContent, function (err) {
    if (err) {
      console.log(err);
    } else {
      console.log(`Wrote variables to ${targetPath}`);
    }
  });
}

// Providing path to the `environments` directory
const envDirectory = './src/environments';

// Creates the `environments` directory if it does not exist
if (!existsSync(envDirectory)) {
  mkdirSync(envDirectory);
}

// Determines if the environment is production based on process.env.NODE_ENV
const isProduction = environment === 'production';

// Chooses the correct targetPath based on the environment
const targetPath = isProduction
  ? './src/environments/environment.prod.ts'
  : './src/environments/environment.ts';

// Make sure we properly escape and sanitize environment variables
// This helps prevent issues with quotes and special characters
const sanitizeEnvVar = (value) => {
  if (value === undefined || value === null) {
    return '""';
  }
  // Escape any quotes in the string and wrap in quotes
  return `"${String(value).replace(/"/g, '\\"')}"`;
};

// Actual content to be compiled dynamically and pasted into respective environment files
const environmentFileContent = `
// This file was autogenerated by dynamically running this script and using dotenv for managing API key secrecy
export const environment = {
  production: ${isProduction},
  OMDB_API_KEY: ${sanitizeEnvVar(process.env.OMDB_API_KEY)},
  USE_STATIC_DATA: ${sanitizeEnvVar(process.env.USE_STATIC_DATA)},
  BACKEND_URL: ${sanitizeEnvVar(process.env.BACKEND_URL)}
};
`;

// Writes or updates the environment file with the necessary configuration
writeFileUsingFS(targetPath, environmentFileContent);

/* tslint:enable */
